{"hash":"d3c4193cf615a37bc82849ae6b29f36ea5a68a9f","data":{"tag":{"title":"README","belongsTo":{"edges":[{"node":{"title":"GitHub README.md 显示博文并自动更新","path":"/code/update-your-posts-in-readme/","date":"August 18. 2020","timeToRead":8,"cjkWordCount":2966,"cjkReadTime":13,"description":"看见别人的 GitHub 主页都换上了 README.md，我就也安排上了。顺便网上冲浪现学 Python 做了个通过 RSS 获取最近博文并自动更新到 README 的小玩意。","content":"<p>今年 GitHub 推出了 profile-level README 的新特性，只要新建与用户名同名仓库并创建 README.md 就可以在 GitHub 个人主页上看到其内容。比起单纯的 Pin 仓库和 Gist 在个人主页，我觉得这让 GitHub 主页变得多元化，查看官方 <a href=\"https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/managing-your-profile-readme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a> 了解更多。不过，像我这种菜鸟想了很久都没有想清楚在个人主页上到底写点什么，拿得出手的项目是不存在的，刷 commit 也是满足下自己的虚荣心，能力的提升微乎其微。</p>\n<p>这段时间看了很多个人介绍仓库，发现我想的有点多：GitHub 是什么? <del>全球最大的同性交友网站啊！</del> 又不是世纪佳缘，写得漂亮能找着对象吗?开心就好，介绍下自己，放张关于自己仓库的小卡片，留点 E-mail Twitter 之外更丰富的社交链接，这个 README.md 就达标辣！（靠 GitHub 找工作的话那当我没说</p>\n<p>单单写 READMD.md 没什么好记录的，本文就记录一下自己为了让 README 稍稍有点逼格而制作同步最近博文功能的经过吧，毕竟对于萌新我来说，做出点有意思的东西是很有成就感的。</p>\n<blockquote>\n<p>写着写着就变成了幼儿读物的感觉，请不要笑话我了，毕竟我是个萌新，阿巴阿巴 🤪</p>\n</blockquote>\n<h2 id=\"从文章中学习\"><a href=\"#%E4%BB%8E%E6%96%87%E7%AB%A0%E4%B8%AD%E5%AD%A6%E4%B9%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>从文章中学习</h2>\n<p>一切是从这里开始的：《<a href=\"https://simonwillison.net/2020/Jul/10/self-updating-profile-readme/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a self-updating profile README for GitHub - Simon Willison’s Weblog</a>》，这位作者的 README 仓库 <a href=\"https://github.com/simonw/simonw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@simonw/simonw</a> 显示了三栏自动更新的内容，包括 GitHub 上的打包发布、博客文章和另外一个站点 T(hings) I L(earned) 的条目。这三栏分别对应了 Python 获取最新内容的三种方式：</p>\n<ul>\n<li>GitHub GraphQL API -> python_graphql_client -> Latest Release</li>\n<li>RSS Atom feed -> feedparser -> Latest posts</li>\n<li>Datasette API -> SQL query -> Latest entries</li>\n</ul>\n<p>第一个和第三个我都不了解，只有 RSS 的格式稍微懂一点，巧的是这正好能用来获取博客最新的文章。动手开始！</p>\n<h2 id=\"面向谷歌编程\"><a href=\"#%E9%9D%A2%E5%90%91%E8%B0%B7%E6%AD%8C%E7%BC%96%E7%A8%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>面向谷歌编程</h2>\n<p>查看仓库现成的 build_readme.py 文件，一眼扫下来 218 行，有点晕。一边看下来 GitHub GraphQL API 和 Datasette API 相关的占了较大篇幅，这说明通过 RSS 获取博客内容的代码较少。这时候我选择找到第一个版本的文件，我觉得最初的版本大概率应该是最简陋的，能让我最快的搞清楚代码的大体结构。第一个版本的 <code>.py</code> <a href=\"https://github.com/simonw/simonw/commit/d2b5e8ba30b0d2b1a867e0bfafa1215a2b5ef287#diff-b8502c56279bd4ac52ccb69f70e81a13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文件</a> 139 行，就从这里开始吧。</p>\n<details><summary><strong>从零开始学 Copy</strong></summary><br />\n<p>从 107 行 <code>if __name__ == \"__main__\"</code> 处开始读，截取在下面第 1 行。这相当于 C 语言的 <code>int main()</code>，以前尝试白嫖腾讯云无服务器环境的时候，环境设置让我知道了这点。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    readme <span class=\"token operator\">=</span> root <span class=\"token operator\">/</span> <span class=\"token string\">\"README.md\"</span>\n    releases <span class=\"token operator\">=</span> fetch_releases<span class=\"token punctuation\">(</span>TOKEN<span class=\"token punctuation\">)</span>\n    releases<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> r<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">[</span><span class=\"token string\">\"published_at\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    md <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"* [{repo} {release}]({url}) - {published_at}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>release<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> release <span class=\"token keyword\">in</span> releases<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    readme_contents <span class=\"token operator\">=</span> readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    rewritten <span class=\"token operator\">=</span> replace_chunk<span class=\"token punctuation\">(</span>readme_contents<span class=\"token punctuation\">,</span> <span class=\"token string\">\"recent_releases\"</span><span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span>\n\n    tils <span class=\"token operator\">=</span> fetch_tils<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    tils_md <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"* [{title}]({url}) - {created_at}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n                title<span class=\"token operator\">=</span>til<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                url<span class=\"token operator\">=</span>til<span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                created_at<span class=\"token operator\">=</span>til<span class=\"token punctuation\">[</span><span class=\"token string\">\"created_utc\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> til <span class=\"token keyword\">in</span> tils\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    rewritten <span class=\"token operator\">=</span> replace_chunk<span class=\"token punctuation\">(</span>rewritten<span class=\"token punctuation\">,</span> <span class=\"token string\">\"tils\"</span><span class=\"token punctuation\">,</span> tils_md<span class=\"token punctuation\">)</span>\n\n    entries <span class=\"token operator\">=</span> fetch_blog_entries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n    entries_md <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"* [{title}]({url}) - {published}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>entry<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> entry <span class=\"token keyword\">in</span> entries<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    rewritten <span class=\"token operator\">=</span> replace_chunk<span class=\"token punctuation\">(</span>rewritten<span class=\"token punctuation\">,</span> <span class=\"token string\">\"blog\"</span><span class=\"token punctuation\">,</span> entries_md<span class=\"token punctuation\">)</span>\n\n    readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>rewritten<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>release</code> <code>til</code> 命名的很显然是获取 GitHub 和 TIL 最新内容的，所以获取博客更新的主要代码就筛选出来了：L1-2 L27-33。L2 用到的变量 <code>root</code> 并没有出现定义，接下来找他的定义和用到的函数 <code>fetch_blog_entries()</code> <code>replace_chunk()</code>。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\">root <span class=\"token operator\">=</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 库 pathlib</span>\n\n<span class=\"token comment\">## ...</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">replace_chunk</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    r <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>                               <span class=\"token comment\"># 库 re</span>\n        <span class=\"token string\">r\"&lt;!\\-\\- {} starts \\-\\->.*&lt;!\\-\\- {} ends \\-\\->\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>marker<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    chunk <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!-- {} starts -->\\n{}\\n&lt;!-- {} ends -->\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>marker<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">## ...</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fetch_blog_entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 库 feedparser</span>\n    entries <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://simonwillison.net/atom/entries/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"entries\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">[</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"published\"</span><span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">[</span><span class=\"token string\">\"published\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> entry <span class=\"token keyword\">in</span> entries\n    <span class=\"token punctuation\">]</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看起来有点麻烦了，此时应该提取出用到的 Python 库，实际调试的时候只要尝试单独运行这些代码块会得到未定义之类的错误，然后就能定位到缺失的库。在 Python 文件开头使用 <code>import</code> 导入即可。</p>\n<p></detail><br /></p>\n<p>下面是正式的面向谷歌编程，也就是学习用轮子（作者用到的那些库 pathlib、re、feedparser 等）：pathlib 库看起来没有需要谷歌的，一个能获取文件路径的库。re 库用到了正则表达式，结合作者在自己的仓库第一版 README.md 中写的 <code>&#x3C;!-- blog starts --></code> <code>&#x3C;!-- blog ends --></code> 这样的标记，不难理解是将结果通过正则匹配找到位置，然后进行替换的。feedparser 库从一个 Atom 链接获取了包含文章信息的数组，是数据获取的源头，于是从这开始。</p>\n<h3 id=\"feedparser-解析-rss\"><a href=\"#feedparser-%E8%A7%A3%E6%9E%90-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>feedparser 解析 RSS</h3>\n<p>《<a href=\"https://vimsky.com/article/4399.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在 Python 中使用 Feedparser 解析 RSS - 纯净天空</a>》一篇足矣，或者看英文版《<a href=\"https://www.pythonforbeginners.com/feedparser/using-feedparser-in-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Feedparser in Python - PythonForBeginners</a>》。当然，RSS 文件也要有一丢丢了解。XML 格式由 HTML 触类旁通不难理解，可以试着戳 <a href=\"https://blog.monsterx.cn/feed.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a> 看看本站的 RSS 源格式。在每个 <code>&#x3C;item></code> 中包含了 <code>&#x3C;title></code> <code>&#x3C;link></code> <code>&#x3C;pubDate></code>，用来输出到 README.md 够了。</p>\n<p>写个示例，那篇文章用的是 dic['feed'] 这种格式，我在本地用起来和 dic.feed 是一样的，就用后面这种短一点的。</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> feedparser\n\n<span class=\"token comment\"># 解析本站的 RSS 源</span>\ndic <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">'https://blog.monsterx.cn/feed.xml'</span><span class=\"token punctuation\">)</span>\nchannel <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">.</span>feed                 <span class=\"token comment\"># 获取 &lt;channel> 数据</span>\nitems <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">.</span>entries                <span class=\"token comment\"># 获取 &lt;item> 数据</span>\nitem <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>                    <span class=\"token comment\"># 获取第一个 &lt;item> 数据</span>\nsitetitle <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>title          <span class=\"token comment\"># 获取 &lt;channel>&lt;title> 数据</span>\nsitelink <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>link            <span class=\"token comment\"># 获取 &lt;channel>&lt;link> 数据</span>\nposttitle <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title         <span class=\"token comment\"># 获取 &lt;item>&lt;title> 数据</span>\npostlink <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>link           <span class=\"token comment\"># 获取 &lt;item>&lt;link> 数据</span>\npostdate <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>published      <span class=\"token comment\"># 获取 &lt;item>&lt;pubDate> 数据</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sitetitle<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RSS 数据较多时 print(dic) 出来可能让人头皮发麻，自行体会吧。下面给出更直观的对比：</p>\n<pre class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rss</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>dc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://purl.org/dc/elements/1.1/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://purl.org/rss/1.0/modules/content/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>atom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2005/Atom<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>channel</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Monstx's Blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>https://blog.monsterx.cn/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>Monsterx CN - 学生 / 前端 / 电气<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lastBuildDate</span><span class=\"token punctuation\">></span></span>Tue, 18 Aug 2020 04:11:01 GMT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lastBuildDate</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>docs</span><span class=\"token punctuation\">></span></span>https://validator.w3.org/feed/docs/rss2.html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>docs</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>generator</span><span class=\"token punctuation\">></span></span>Gridsome Feed Plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>generator</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">atom:</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://blog.monsterx.cn/feed.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>self<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application/rss+xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token cdata\">&lt;![CDATA[ New Start ]]></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>https://blog.monsterx.cn/life/new-start-with-gridsome/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>guid</span><span class=\"token punctuation\">></span></span>https://blog.monsterx.cn/life/new-start-with-gridsome/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>guid</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pubDate</span><span class=\"token punctuation\">></span></span>Sat, 15 Aug 2020 00:00:00 GMT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pubDate</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">content:</span>encoded</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token cdata\">&lt;![CDATA[ &lt;p>在这普通的一天，我穿着普通的鞋...&lt;/p> ]]></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">content:</span>encoded</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n            ....\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n            ....\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>channel</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rss</span><span class=\"token punctuation\">></span></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解析后：</p>\n<details><summary><strong>Freeparser JSON 解析结果</strong></summary><br />\n<pre class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  'feed'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    'title'<span class=\"token operator\">:</span> <span class=\"token string\">\"Monstx's Blog\"</span><span class=\"token punctuation\">,</span> \n    'title_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      'type'<span class=\"token operator\">:</span> 'text/plain'<span class=\"token punctuation\">,</span> \n      'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n      'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n      'value'<span class=\"token operator\">:</span> <span class=\"token string\">\"Monstx's Blog\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    'links'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        'rel'<span class=\"token operator\">:</span> 'alternate'<span class=\"token punctuation\">,</span> \n        'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n        'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n        'rel'<span class=\"token operator\">:</span> 'self'<span class=\"token punctuation\">,</span> \n        'type'<span class=\"token operator\">:</span> 'application/rss+xml'\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n    'link'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/', </span>\n    'subtitle'<span class=\"token operator\">:</span> 'Monsterx CN - 学生 / 前端 / 电气'<span class=\"token punctuation\">,</span> \n    'subtitle_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n      'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n      'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n      'value'<span class=\"token operator\">:</span> 'Monsterx CN - 学生 / 前端 / 电气'\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    'updated'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">01</span> GMT'<span class=\"token punctuation\">,</span> \n    'updated_parsed'<span class=\"token operator\">:</span> time.struct_time(tm_year=<span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> tm_mon=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> tm_mday=<span class=\"token number\">18</span><span class=\"token punctuation\">,</span> tm_hour=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> tm_min=<span class=\"token number\">11</span><span class=\"token punctuation\">,</span> tm_sec=<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm_wday=<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm_yday=<span class=\"token number\">231</span><span class=\"token punctuation\">,</span> tm_isdst=<span class=\"token number\">0</span>)<span class=\"token punctuation\">,</span> \n    'docs'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//validator.w3.org/feed/docs/rss2.html', </span>\n    'generator_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>'name'<span class=\"token operator\">:</span> 'Gridsome Feed Plugin'<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    'generator'<span class=\"token operator\">:</span> 'Gridsome Feed Plugin'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n  'entries'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      'title'<span class=\"token operator\">:</span> 'New Start'<span class=\"token punctuation\">,</span> \n      'title_detail'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        'type'<span class=\"token operator\">:</span> 'text/plain'<span class=\"token punctuation\">,</span> \n        'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n        'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n        'value'<span class=\"token operator\">:</span> 'New Start'\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n      'links'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          'rel'<span class=\"token operator\">:</span> 'alternate'<span class=\"token punctuation\">,</span> \n          'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n          'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/life/new-start-with-gridsome/'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n      'link'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/life/new-start-with-gridsome/', </span>\n      'id'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/life/new-start-with-gridsome/', </span>\n      'guidislink'<span class=\"token operator\">:</span> False<span class=\"token punctuation\">,</span> \n      'published'<span class=\"token operator\">:</span> 'Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span> GMT'<span class=\"token punctuation\">,</span> \n      'published_parsed'<span class=\"token operator\">:</span> time.struct_time(tm_year=<span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> tm_mon=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> tm_mday=<span class=\"token number\">15</span><span class=\"token punctuation\">,</span> tm_hour=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tm_min=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tm_sec=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tm_wday=<span class=\"token number\">5</span><span class=\"token punctuation\">,</span> tm_yday=<span class=\"token number\">228</span><span class=\"token punctuation\">,</span> tm_isdst=<span class=\"token number\">0</span>)<span class=\"token punctuation\">,</span> \n      'content'<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          'type'<span class=\"token operator\">:</span> 'text/html'<span class=\"token punctuation\">,</span> \n          'language'<span class=\"token operator\">:</span> None<span class=\"token punctuation\">,</span> \n          'base'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n          'value'<span class=\"token operator\">:</span> '&lt;p>在这普通的一天，我穿着普通的鞋...&lt;/p>'\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n      'summary'<span class=\"token operator\">:</span> '&lt;p>在这普通的一天，我穿着普通的鞋...&lt;/p>'\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      ...\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n  'bozo'<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> \n  'headers'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    'Server'<span class=\"token operator\">:</span> 'Tengine'<span class=\"token punctuation\">,</span> \n    'Content-Type'<span class=\"token operator\">:</span> 'application/xml'<span class=\"token punctuation\">,</span> \n    'Transfer-Encoding'<span class=\"token operator\">:</span> 'chunked'<span class=\"token punctuation\">,</span> \n    'Connection'<span class=\"token operator\">:</span> 'close'<span class=\"token punctuation\">,</span> \n    'Vary'<span class=\"token operator\">:</span> 'Accept-Encoding'<span class=\"token punctuation\">,</span> \n    'Strict-Transport-Security'<span class=\"token operator\">:</span> 'max-age=<span class=\"token number\">31536000</span>'<span class=\"token punctuation\">,</span> \n    'Date'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">13</span><span class=\"token operator\">:</span><span class=\"token number\">37</span><span class=\"token operator\">:</span><span class=\"token number\">32</span> GMT'<span class=\"token punctuation\">,</span> \n    'x-oss-request-id'<span class=\"token operator\">:</span> '5F3BD99C7DD3BB333136465D'<span class=\"token punctuation\">,</span> \n    'x-oss-cdn-auth'<span class=\"token operator\">:</span> 'success'<span class=\"token punctuation\">,</span> \n    'ETag'<span class=\"token operator\">:</span> 'W/<span class=\"token string\">\"7885150FF626A52F9C8E511300EDC191\"</span>'<span class=\"token punctuation\">,</span> \n    'Last-Modified'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">35</span> GMT'<span class=\"token punctuation\">,</span> \n    'x-oss-object-type'<span class=\"token operator\">:</span> 'Normal'<span class=\"token punctuation\">,</span> \n    'x-oss-hash-crc64ecma'<span class=\"token operator\">:</span> '<span class=\"token number\">904326687370716414</span>'<span class=\"token punctuation\">,</span> \n    'x-oss-storage-class'<span class=\"token operator\">:</span> 'Standard'<span class=\"token punctuation\">,</span> \n    'x-oss-server-side-encryption'<span class=\"token operator\">:</span> 'AES256'<span class=\"token punctuation\">,</span> \n    'Content-MD5'<span class=\"token operator\">:</span> 'eIUVD/YmpS+cjlETAO3BkQ=='<span class=\"token punctuation\">,</span> \n    'x-oss-server-time'<span class=\"token operator\">:</span> '<span class=\"token number\">40</span>'<span class=\"token punctuation\">,</span> \n    'Via'<span class=\"token operator\">:</span> 'cache36.l2cm9<span class=\"token number\">-5</span><span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kunlun8.cn2479<span class=\"token punctuation\">[</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>'<span class=\"token punctuation\">,</span> \n    'Timing-Allow-Origin'<span class=\"token operator\">:</span> '*'<span class=\"token punctuation\">,</span> \n    'EagleId'<span class=\"token operator\">:</span> '249c511c15977578523801838e'<span class=\"token punctuation\">,</span> \n    'Content-Encoding'<span class=\"token operator\">:</span> 'gzip'\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n  'etag'<span class=\"token operator\">:</span> 'W/<span class=\"token string\">\"7885150FF626A52F9C8E511300EDC191\"</span>'<span class=\"token punctuation\">,</span> \n  'updated'<span class=\"token operator\">:</span> 'Tue<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">35</span> GMT'<span class=\"token punctuation\">,</span> \n  'updated_parsed'<span class=\"token operator\">:</span> time.struct_time(tm_year=<span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> tm_mon=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> tm_mday=<span class=\"token number\">18</span><span class=\"token punctuation\">,</span> tm_hour=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> tm_min=<span class=\"token number\">11</span><span class=\"token punctuation\">,</span> tm_sec=<span class=\"token number\">35</span><span class=\"token punctuation\">,</span> tm_wday=<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tm_yday=<span class=\"token number\">231</span><span class=\"token punctuation\">,</span> tm_isdst=<span class=\"token number\">0</span>)<span class=\"token punctuation\">,</span> \n  'href'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.monsterx.cn/feed.xml', </span>\n  'status'<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> \n  'encoding'<span class=\"token operator\">:</span> 'utf<span class=\"token number\">-8</span>'<span class=\"token punctuation\">,</span> \n  'version'<span class=\"token operator\">:</span> 'rss20'<span class=\"token punctuation\">,</span> \n  'namespaces'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    'dc'<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span><span class=\"token comment\">//purl.org/dc/elements/1.1/', </span>\n    'content'<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span><span class=\"token comment\">//purl.org/rss/1.0/modules/content/', </span>\n    ''<span class=\"token operator\">:</span> 'http<span class=\"token operator\">:</span><span class=\"token comment\">//www.w3.org/2005/Atom'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details><br />\n<p>可以看到解析出来的内容是 JSON 格式的，而且结果不仅仅是 XML 文件可见的内容，HTTP Header 信息也能完整解析。值得注意的地方： <code>&#x3C;item>&#x3C;pubDate></code> 并不是通过形如 <code>items[0].pubDate</code> 获取的，而是 <code>items[0].published</code> 。根据这个结构更加灵活的运用 feedparser 吧！实现 README 自动更新最近博文并不需要这些，我给的示例足够用了。</p>\n<h3 id=\"re-正则表达式替换\"><a href=\"#re-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9B%BF%E6%8D%A2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>re 正则表达式替换</h3>\n<p>学 re 库从 Python 官方文档开始：<a href=\"https://docs.python.org/zh-cn/3/library/re.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">re --- 正则表达式操作 - Python 3 中文文档</a>。不过最重要的还是学会写正则表达式，多写一些多搜一搜，时间久了自然就会了，我是这么想的。这里给出用于匹配 <strong>指定字符串之间所有内容且不包含指定字符串的</strong> 正则表达式。</p>\n<ul>\n<li><code>(?&#x3C;=MARK)</code> 指定以 <code>MARK</code> 开头的：遇到 <code>MARK</code> 后开始匹配</li>\n<li><code>(?=MARK)</code> 指定 <code>MARK</code> 结尾的：遇到 <code>MARK</code> 前停止匹配</li>\n<li><code>.</code> ：re 库中 <code>.</code> 在默认模式匹配除了换行的任意字符。如果指定了标签 <code>DOTALL</code> ，它将匹配包括换行符的任意字符</li>\n<li><code>*</code> ：对它前面的正则式匹配 0 到任意次重复，尽可能多地匹配</li>\n</ul>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 拼接正则表达式并指定标签 DOTALL</span>\n<span class=\"token comment\"># (?&lt;=(STARTMARK)).*(?=(ENDMARK))</span>\n\nstart <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!-- posts start -->\"</span>\nend <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!-- posts end -->\"</span>\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">r\"(?&lt;=(\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">r\")).*(?=(\"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">r\"))\"</span><span class=\"token punctuation\">,</span>\n    re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>re.compile()</code> 将正则表达式的样式编译为一个正则表达式对象（正则对象），如果需要多次使用这个正则表达式的话，使用 <code>re.compile()</code> 和保存这个正则对象以便复用，可以让程序更加高效。样例：<code>re.compile(pattern, flags=0)</code></p>\n<blockquote>\n<p><code>re.sub(pattern, repl, string, count=0, flags=0)</code> <br />\n返回通过使用 <code>repl</code> 替换在 <code>string</code> 最左边非重叠出现的 <code>pattern</code> 而获得的字符串。如果样式没有找到，则不加改变地返回 <code>string</code>。<code>repl</code> 可以是字符串或函数；如为字符串，则其中任何反斜杠转义序列都会被处理。也就是说，<code>\\n</code> 会被转换为一个换行符，<code>\\r</code> 会被转换为一个回车附，依此类推。未知的 ASCII 字符转义序列保留在未来使用，会被当作错误来处理。其他未知转义序列例如 <code>\\&#x26;</code> 会保持原样。 向后引用像是 <code>\\6</code> 会用样式中第 6 组所匹配到的子字符串来替换。 <br />\n如果 <code>repl</code> 是一个函数，那它会对每个非重复的 <code>pattern</code> 的情况调用。这个函数只能有一个 <em>匹配对象</em> 参数，并返回一个替换后的字符串。 <br />\n样式可以是一个字符串或者一个 <em>样式对象</em> 。 <br />\n可选参数 <code>count</code> 是要替换的最大次数；<code>count</code> 必须是非负整数。如果忽略这个参数，或者设置为 0，所有的匹配都会被替换。空匹配只在不相临连续的情况被更替，所以 <code>sub('x*', '-', 'abxd')</code> 返回 <code>'-a-b--d-'</code> 。 <br />\n在字符串类型的 <code>repl</code> 参数里，如上所述的转义和向后引用中，<code>\\g&#x3C;name></code> 会使用命名组合 <code>name</code>，（在 <code>(?P&#x3C;name>…)</code> 语法中定义） <code>\\g&#x3C;number></code> 会使用数字组；<code>\\g&#x3C;2></code> 就是 <code>\\2</code>，但它避免了二义性，如 <code>\\g&#x3C;2>0</code>。 <code>\\20</code> 就会被解释为组 <code>20</code>，而不是组 <code>2</code> 后面跟随一个字符 <code>'0'</code>。向后引用 <code>\\g&#x3C;0></code> 把 <code>pattern</code> 作为一整个组进行引用。</p>\n</blockquote>\n<p>文档太专业了，总之 <code>re.sub(pattern, repl, string)</code> 可以用 <code>repl</code> 替换掉 <code>string</code> 内所有与 <code>pattern</code> 匹配的内容，或者使用编译后的样式 <code>pattern.sub(repl, string)</code>。</p>\n<p>写个示例：</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\nstart <span class=\"token operator\">=</span> <span class=\"token string\">\"STARTMARK\"</span>\nend <span class=\"token operator\">=</span> <span class=\"token string\">\"ENDMARK\"</span>\nrepl <span class=\"token operator\">=</span> <span class=\"token string\">\"text used to replace\"</span>\ncontents <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"text wait STARTMARK ing for being ENDMARK replaced\"\"\"</span>\n\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">r\"(?&lt;=(\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">r\")).*(?=(\"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">r\"))\"</span><span class=\"token punctuation\">,</span>\n  re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\npattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>repl<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最终输出 <code>contents</code> 为 <code>text wait STARTMARKtext used to replaceENDMARK replaced</code>。</p>\n<h3 id=\"python-文件读写\"><a href=\"#python-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python 文件读写</h3>\n<p>懒得深究了，因为从之前作者的代码里找到了关于读写的:</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 当前文件的文件夹路径</span>\nthisdir <span class=\"token operator\">=</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># .py 与 README.md 同级时获取 README 完整路径</span>\nthisfile <span class=\"token operator\">=</span> thisdir <span class=\"token operator\">/</span> <span class=\"token string\">\"README.md\"</span>\n<span class=\"token comment\"># 取得 README 内容</span>\ncontents <span class=\"token operator\">=</span> thisfile<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 结合之前的 re 库示例实现替换</span>\nreadme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>repl<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>C 语言文件读写 <code>fopen()</code> 后还有 <code>fclose()</code> 的，作者的代码里没有找到 close 之类的。应该是程序结束默认关闭了吧，急于实现功能，此处没有留意。</p>\n<h2 id=\"整理整套代码\"><a href=\"#%E6%95%B4%E7%90%86%E6%95%B4%E5%A5%97%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>整理整套代码</h2>\n<p>以上所有学习途径自以为都交代清楚了，最后整合时用了 <code>for</code> 循环和一个 <code>[start:end:step]</code> 的分割来获取最近的固定篇数，完整实现这个「从 RSS 获取最近更新并以 Markdown 格式写入 README.md」的功能需要的代码篇幅很短，Python 真有趣！</p>\n<pre class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> feedparser\n<span class=\"token keyword\">import</span> pathlib\n<span class=\"token keyword\">import</span> re\n\nrssUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://blog.monsterx.cn/feed.xml\"</span>\nstartMark <span class=\"token operator\">=</span> <span class=\"token string\">r\"&lt;!-- posts start -->\"</span>\nendMark <span class=\"token operator\">=</span> <span class=\"token string\">r\"&lt;!-- posts end -->\"</span>\nNUM <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">update_readme</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> repl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Splicing complete regular expressions</span>\n    pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">r\"(?&lt;=(\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">r\")).*(?=(\"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">r\"))\"</span><span class=\"token punctuation\">,</span>\n        re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Get contents and rewrite README.md</span>\n    readme <span class=\"token operator\">=</span> pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"README.md\"</span>\n    readme_contents <span class=\"token operator\">=</span> readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    readme<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> repl <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> readme_contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fetch_posts</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    blog <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    posts <span class=\"token operator\">=</span> blog<span class=\"token punctuation\">[</span><span class=\"token string\">'entries'</span><span class=\"token punctuation\">]</span>\n    markdown <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span>\n    <span class=\"token comment\"># Fetch only 5 latest posts' info</span>\n    <span class=\"token comment\"># My post.published return \"Tue, 30 Jun 2020 00:00:00 GMT\"</span>\n    <span class=\"token comment\"># So I just intercept the middle part of the character</span>\n    <span class=\"token keyword\">for</span> post <span class=\"token keyword\">in</span> posts<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># markdown += \" ※ 《[\" + post.title + \"](\" + post.link + \")》\" + post.published + \"&lt;br />\\n\"</span>\n        markdown <span class=\"token operator\">+=</span> <span class=\"token string\">\" ※ 《[\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">\"](\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">.</span>link <span class=\"token operator\">+</span> <span class=\"token string\">\")》\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">.</span>published<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br />\\n\"</span>\n    markdown <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n\\n [Read more..](\"</span> <span class=\"token operator\">+</span> blog<span class=\"token punctuation\">[</span><span class=\"token string\">'feed'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\\n\"</span>\n    <span class=\"token keyword\">return</span> markdown\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    postsNew <span class=\"token operator\">=</span> fetch_posts<span class=\"token punctuation\">(</span>rssUrl<span class=\"token punctuation\">)</span>\n    update_readme<span class=\"token punctuation\">(</span>startMark<span class=\"token punctuation\">,</span> endMark<span class=\"token punctuation\">,</span> postsNew<span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>按需要小小修改一下，执行 <code>python this.py</code> 即可替换指定字符串之间内容为最新的博客文章。「自动」的事情依旧交给 GitHub Actions，设置一个自己点 Star 触发和定时执行即可，给出我的工作流配置 <a href=\"https://github.com/monsterxcn/monsterxcn/blob/master/.github/workflows/new.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">new.yml</a> 。是和之前打卡项目相同的原理。看到这里的你我猜也有兴趣读读我之前的文章 🤣</p>\n<p>另外我的 README.md 使用了 <a href=\"https://github.com/anuraghazra/github-readme-stats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@anuraghazra/github-readme-stats</a> 展示 GitHub 账号的统计信息，使用了 <a href=\"https://shields.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shields.io</a> 和 <a href=\"https://simpleicons.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simple Icons</a> 生成精致的图标。快来给自己也安排一个吧！</p>\n"}}]}}},"context":{}}